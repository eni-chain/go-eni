// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package eth

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_AccessTuple_2_list)(nil)

type _AccessTuple_2_list struct {
	list *[]string
}

func (x *_AccessTuple_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AccessTuple_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_AccessTuple_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_AccessTuple_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_AccessTuple_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message AccessTuple at list field StorageKeys as it is not of Message kind"))
}

func (x *_AccessTuple_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_AccessTuple_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_AccessTuple_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_AccessTuple              protoreflect.MessageDescriptor
	fd_AccessTuple_address      protoreflect.FieldDescriptor
	fd_AccessTuple_storage_keys protoreflect.FieldDescriptor
)

func init() {
	file_goeni_eth_tx_proto_init()
	md_AccessTuple = File_goeni_eth_tx_proto.Messages().ByName("AccessTuple")
	fd_AccessTuple_address = md_AccessTuple.Fields().ByName("address")
	fd_AccessTuple_storage_keys = md_AccessTuple.Fields().ByName("storage_keys")
}

var _ protoreflect.Message = (*fastReflection_AccessTuple)(nil)

type fastReflection_AccessTuple AccessTuple

func (x *AccessTuple) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AccessTuple)(x)
}

func (x *AccessTuple) slowProtoReflect() protoreflect.Message {
	mi := &file_goeni_eth_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AccessTuple_messageType fastReflection_AccessTuple_messageType
var _ protoreflect.MessageType = fastReflection_AccessTuple_messageType{}

type fastReflection_AccessTuple_messageType struct{}

func (x fastReflection_AccessTuple_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AccessTuple)(nil)
}
func (x fastReflection_AccessTuple_messageType) New() protoreflect.Message {
	return new(fastReflection_AccessTuple)
}
func (x fastReflection_AccessTuple_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AccessTuple
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AccessTuple) Descriptor() protoreflect.MessageDescriptor {
	return md_AccessTuple
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AccessTuple) Type() protoreflect.MessageType {
	return _fastReflection_AccessTuple_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AccessTuple) New() protoreflect.Message {
	return new(fastReflection_AccessTuple)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AccessTuple) Interface() protoreflect.ProtoMessage {
	return (*AccessTuple)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AccessTuple) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_AccessTuple_address, value) {
			return
		}
	}
	if len(x.StorageKeys) != 0 {
		value := protoreflect.ValueOfList(&_AccessTuple_2_list{list: &x.StorageKeys})
		if !f(fd_AccessTuple_storage_keys, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AccessTuple) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goeni.eth.AccessTuple.address":
		return x.Address != ""
	case "goeni.eth.AccessTuple.storage_keys":
		return len(x.StorageKeys) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessTuple"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessTuple does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccessTuple) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goeni.eth.AccessTuple.address":
		x.Address = ""
	case "goeni.eth.AccessTuple.storage_keys":
		x.StorageKeys = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessTuple"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessTuple does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AccessTuple) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goeni.eth.AccessTuple.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "goeni.eth.AccessTuple.storage_keys":
		if len(x.StorageKeys) == 0 {
			return protoreflect.ValueOfList(&_AccessTuple_2_list{})
		}
		listValue := &_AccessTuple_2_list{list: &x.StorageKeys}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessTuple"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessTuple does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccessTuple) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goeni.eth.AccessTuple.address":
		x.Address = value.Interface().(string)
	case "goeni.eth.AccessTuple.storage_keys":
		lv := value.List()
		clv := lv.(*_AccessTuple_2_list)
		x.StorageKeys = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessTuple"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessTuple does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccessTuple) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.AccessTuple.storage_keys":
		if x.StorageKeys == nil {
			x.StorageKeys = []string{}
		}
		value := &_AccessTuple_2_list{list: &x.StorageKeys}
		return protoreflect.ValueOfList(value)
	case "goeni.eth.AccessTuple.address":
		panic(fmt.Errorf("field address of message goeni.eth.AccessTuple is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessTuple"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessTuple does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AccessTuple) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.AccessTuple.address":
		return protoreflect.ValueOfString("")
	case "goeni.eth.AccessTuple.storage_keys":
		list := []string{}
		return protoreflect.ValueOfList(&_AccessTuple_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessTuple"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessTuple does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AccessTuple) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goeni.eth.AccessTuple", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AccessTuple) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccessTuple) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AccessTuple) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AccessTuple) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AccessTuple)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.StorageKeys) > 0 {
			for _, s := range x.StorageKeys {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AccessTuple)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.StorageKeys) > 0 {
			for iNdEx := len(x.StorageKeys) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.StorageKeys[iNdEx])
				copy(dAtA[i:], x.StorageKeys[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StorageKeys[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AccessTuple)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AccessTuple: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AccessTuple: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StorageKeys", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StorageKeys = append(x.StorageKeys, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AssociateTx                protoreflect.MessageDescriptor
	fd_AssociateTx_v              protoreflect.FieldDescriptor
	fd_AssociateTx_r              protoreflect.FieldDescriptor
	fd_AssociateTx_s              protoreflect.FieldDescriptor
	fd_AssociateTx_custom_message protoreflect.FieldDescriptor
)

func init() {
	file_goeni_eth_tx_proto_init()
	md_AssociateTx = File_goeni_eth_tx_proto.Messages().ByName("AssociateTx")
	fd_AssociateTx_v = md_AssociateTx.Fields().ByName("v")
	fd_AssociateTx_r = md_AssociateTx.Fields().ByName("r")
	fd_AssociateTx_s = md_AssociateTx.Fields().ByName("s")
	fd_AssociateTx_custom_message = md_AssociateTx.Fields().ByName("custom_message")
}

var _ protoreflect.Message = (*fastReflection_AssociateTx)(nil)

type fastReflection_AssociateTx AssociateTx

func (x *AssociateTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AssociateTx)(x)
}

func (x *AssociateTx) slowProtoReflect() protoreflect.Message {
	mi := &file_goeni_eth_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AssociateTx_messageType fastReflection_AssociateTx_messageType
var _ protoreflect.MessageType = fastReflection_AssociateTx_messageType{}

type fastReflection_AssociateTx_messageType struct{}

func (x fastReflection_AssociateTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AssociateTx)(nil)
}
func (x fastReflection_AssociateTx_messageType) New() protoreflect.Message {
	return new(fastReflection_AssociateTx)
}
func (x fastReflection_AssociateTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AssociateTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AssociateTx) Descriptor() protoreflect.MessageDescriptor {
	return md_AssociateTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AssociateTx) Type() protoreflect.MessageType {
	return _fastReflection_AssociateTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AssociateTx) New() protoreflect.Message {
	return new(fastReflection_AssociateTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AssociateTx) Interface() protoreflect.ProtoMessage {
	return (*AssociateTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AssociateTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.V) != 0 {
		value := protoreflect.ValueOfBytes(x.V)
		if !f(fd_AssociateTx_v, value) {
			return
		}
	}
	if len(x.R) != 0 {
		value := protoreflect.ValueOfBytes(x.R)
		if !f(fd_AssociateTx_r, value) {
			return
		}
	}
	if len(x.S) != 0 {
		value := protoreflect.ValueOfBytes(x.S)
		if !f(fd_AssociateTx_s, value) {
			return
		}
	}
	if x.CustomMessage != "" {
		value := protoreflect.ValueOfString(x.CustomMessage)
		if !f(fd_AssociateTx_custom_message, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AssociateTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goeni.eth.AssociateTx.v":
		return len(x.V) != 0
	case "goeni.eth.AssociateTx.r":
		return len(x.R) != 0
	case "goeni.eth.AssociateTx.s":
		return len(x.S) != 0
	case "goeni.eth.AssociateTx.custom_message":
		return x.CustomMessage != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AssociateTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AssociateTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssociateTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goeni.eth.AssociateTx.v":
		x.V = nil
	case "goeni.eth.AssociateTx.r":
		x.R = nil
	case "goeni.eth.AssociateTx.s":
		x.S = nil
	case "goeni.eth.AssociateTx.custom_message":
		x.CustomMessage = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AssociateTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AssociateTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AssociateTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goeni.eth.AssociateTx.v":
		value := x.V
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.AssociateTx.r":
		value := x.R
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.AssociateTx.s":
		value := x.S
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.AssociateTx.custom_message":
		value := x.CustomMessage
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AssociateTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AssociateTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssociateTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goeni.eth.AssociateTx.v":
		x.V = value.Bytes()
	case "goeni.eth.AssociateTx.r":
		x.R = value.Bytes()
	case "goeni.eth.AssociateTx.s":
		x.S = value.Bytes()
	case "goeni.eth.AssociateTx.custom_message":
		x.CustomMessage = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AssociateTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AssociateTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssociateTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.AssociateTx.v":
		panic(fmt.Errorf("field v of message goeni.eth.AssociateTx is not mutable"))
	case "goeni.eth.AssociateTx.r":
		panic(fmt.Errorf("field r of message goeni.eth.AssociateTx is not mutable"))
	case "goeni.eth.AssociateTx.s":
		panic(fmt.Errorf("field s of message goeni.eth.AssociateTx is not mutable"))
	case "goeni.eth.AssociateTx.custom_message":
		panic(fmt.Errorf("field custom_message of message goeni.eth.AssociateTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AssociateTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AssociateTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AssociateTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.AssociateTx.v":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.AssociateTx.r":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.AssociateTx.s":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.AssociateTx.custom_message":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AssociateTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AssociateTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AssociateTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goeni.eth.AssociateTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AssociateTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AssociateTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AssociateTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AssociateTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AssociateTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.V)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.R)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.S)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CustomMessage)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AssociateTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.CustomMessage) > 0 {
			i -= len(x.CustomMessage)
			copy(dAtA[i:], x.CustomMessage)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CustomMessage)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.S) > 0 {
			i -= len(x.S)
			copy(dAtA[i:], x.S)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.S)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.R) > 0 {
			i -= len(x.R)
			copy(dAtA[i:], x.R)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.R)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.V) > 0 {
			i -= len(x.V)
			copy(dAtA[i:], x.V)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.V)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AssociateTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AssociateTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AssociateTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.V = append(x.V[:0], dAtA[iNdEx:postIndex]...)
				if x.V == nil {
					x.V = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.R = append(x.R[:0], dAtA[iNdEx:postIndex]...)
				if x.R == nil {
					x.R = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.S = append(x.S[:0], dAtA[iNdEx:postIndex]...)
				if x.S == nil {
					x.S = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CustomMessage", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CustomMessage = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_LegacyTx           protoreflect.MessageDescriptor
	fd_LegacyTx_nonce     protoreflect.FieldDescriptor
	fd_LegacyTx_gas_price protoreflect.FieldDescriptor
	fd_LegacyTx_gas_limit protoreflect.FieldDescriptor
	fd_LegacyTx_to        protoreflect.FieldDescriptor
	fd_LegacyTx_value     protoreflect.FieldDescriptor
	fd_LegacyTx_data      protoreflect.FieldDescriptor
	fd_LegacyTx_v         protoreflect.FieldDescriptor
	fd_LegacyTx_r         protoreflect.FieldDescriptor
	fd_LegacyTx_s         protoreflect.FieldDescriptor
)

func init() {
	file_goeni_eth_tx_proto_init()
	md_LegacyTx = File_goeni_eth_tx_proto.Messages().ByName("LegacyTx")
	fd_LegacyTx_nonce = md_LegacyTx.Fields().ByName("nonce")
	fd_LegacyTx_gas_price = md_LegacyTx.Fields().ByName("gas_price")
	fd_LegacyTx_gas_limit = md_LegacyTx.Fields().ByName("gas_limit")
	fd_LegacyTx_to = md_LegacyTx.Fields().ByName("to")
	fd_LegacyTx_value = md_LegacyTx.Fields().ByName("value")
	fd_LegacyTx_data = md_LegacyTx.Fields().ByName("data")
	fd_LegacyTx_v = md_LegacyTx.Fields().ByName("v")
	fd_LegacyTx_r = md_LegacyTx.Fields().ByName("r")
	fd_LegacyTx_s = md_LegacyTx.Fields().ByName("s")
}

var _ protoreflect.Message = (*fastReflection_LegacyTx)(nil)

type fastReflection_LegacyTx LegacyTx

func (x *LegacyTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LegacyTx)(x)
}

func (x *LegacyTx) slowProtoReflect() protoreflect.Message {
	mi := &file_goeni_eth_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LegacyTx_messageType fastReflection_LegacyTx_messageType
var _ protoreflect.MessageType = fastReflection_LegacyTx_messageType{}

type fastReflection_LegacyTx_messageType struct{}

func (x fastReflection_LegacyTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LegacyTx)(nil)
}
func (x fastReflection_LegacyTx_messageType) New() protoreflect.Message {
	return new(fastReflection_LegacyTx)
}
func (x fastReflection_LegacyTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LegacyTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LegacyTx) Descriptor() protoreflect.MessageDescriptor {
	return md_LegacyTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LegacyTx) Type() protoreflect.MessageType {
	return _fastReflection_LegacyTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LegacyTx) New() protoreflect.Message {
	return new(fastReflection_LegacyTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LegacyTx) Interface() protoreflect.ProtoMessage {
	return (*LegacyTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LegacyTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_LegacyTx_nonce, value) {
			return
		}
	}
	if x.GasPrice != "" {
		value := protoreflect.ValueOfString(x.GasPrice)
		if !f(fd_LegacyTx_gas_price, value) {
			return
		}
	}
	if x.GasLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GasLimit)
		if !f(fd_LegacyTx_gas_limit, value) {
			return
		}
	}
	if x.To != "" {
		value := protoreflect.ValueOfString(x.To)
		if !f(fd_LegacyTx_to, value) {
			return
		}
	}
	if x.Value != "" {
		value := protoreflect.ValueOfString(x.Value)
		if !f(fd_LegacyTx_value, value) {
			return
		}
	}
	if len(x.Data) != 0 {
		value := protoreflect.ValueOfBytes(x.Data)
		if !f(fd_LegacyTx_data, value) {
			return
		}
	}
	if len(x.V) != 0 {
		value := protoreflect.ValueOfBytes(x.V)
		if !f(fd_LegacyTx_v, value) {
			return
		}
	}
	if len(x.R) != 0 {
		value := protoreflect.ValueOfBytes(x.R)
		if !f(fd_LegacyTx_r, value) {
			return
		}
	}
	if len(x.S) != 0 {
		value := protoreflect.ValueOfBytes(x.S)
		if !f(fd_LegacyTx_s, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LegacyTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goeni.eth.LegacyTx.nonce":
		return x.Nonce != uint64(0)
	case "goeni.eth.LegacyTx.gas_price":
		return x.GasPrice != ""
	case "goeni.eth.LegacyTx.gas_limit":
		return x.GasLimit != uint64(0)
	case "goeni.eth.LegacyTx.to":
		return x.To != ""
	case "goeni.eth.LegacyTx.value":
		return x.Value != ""
	case "goeni.eth.LegacyTx.data":
		return len(x.Data) != 0
	case "goeni.eth.LegacyTx.v":
		return len(x.V) != 0
	case "goeni.eth.LegacyTx.r":
		return len(x.R) != 0
	case "goeni.eth.LegacyTx.s":
		return len(x.S) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.LegacyTx"))
		}
		panic(fmt.Errorf("message goeni.eth.LegacyTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goeni.eth.LegacyTx.nonce":
		x.Nonce = uint64(0)
	case "goeni.eth.LegacyTx.gas_price":
		x.GasPrice = ""
	case "goeni.eth.LegacyTx.gas_limit":
		x.GasLimit = uint64(0)
	case "goeni.eth.LegacyTx.to":
		x.To = ""
	case "goeni.eth.LegacyTx.value":
		x.Value = ""
	case "goeni.eth.LegacyTx.data":
		x.Data = nil
	case "goeni.eth.LegacyTx.v":
		x.V = nil
	case "goeni.eth.LegacyTx.r":
		x.R = nil
	case "goeni.eth.LegacyTx.s":
		x.S = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.LegacyTx"))
		}
		panic(fmt.Errorf("message goeni.eth.LegacyTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LegacyTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goeni.eth.LegacyTx.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	case "goeni.eth.LegacyTx.gas_price":
		value := x.GasPrice
		return protoreflect.ValueOfString(value)
	case "goeni.eth.LegacyTx.gas_limit":
		value := x.GasLimit
		return protoreflect.ValueOfUint64(value)
	case "goeni.eth.LegacyTx.to":
		value := x.To
		return protoreflect.ValueOfString(value)
	case "goeni.eth.LegacyTx.value":
		value := x.Value
		return protoreflect.ValueOfString(value)
	case "goeni.eth.LegacyTx.data":
		value := x.Data
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.LegacyTx.v":
		value := x.V
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.LegacyTx.r":
		value := x.R
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.LegacyTx.s":
		value := x.S
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.LegacyTx"))
		}
		panic(fmt.Errorf("message goeni.eth.LegacyTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goeni.eth.LegacyTx.nonce":
		x.Nonce = value.Uint()
	case "goeni.eth.LegacyTx.gas_price":
		x.GasPrice = value.Interface().(string)
	case "goeni.eth.LegacyTx.gas_limit":
		x.GasLimit = value.Uint()
	case "goeni.eth.LegacyTx.to":
		x.To = value.Interface().(string)
	case "goeni.eth.LegacyTx.value":
		x.Value = value.Interface().(string)
	case "goeni.eth.LegacyTx.data":
		x.Data = value.Bytes()
	case "goeni.eth.LegacyTx.v":
		x.V = value.Bytes()
	case "goeni.eth.LegacyTx.r":
		x.R = value.Bytes()
	case "goeni.eth.LegacyTx.s":
		x.S = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.LegacyTx"))
		}
		panic(fmt.Errorf("message goeni.eth.LegacyTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.LegacyTx.nonce":
		panic(fmt.Errorf("field nonce of message goeni.eth.LegacyTx is not mutable"))
	case "goeni.eth.LegacyTx.gas_price":
		panic(fmt.Errorf("field gas_price of message goeni.eth.LegacyTx is not mutable"))
	case "goeni.eth.LegacyTx.gas_limit":
		panic(fmt.Errorf("field gas_limit of message goeni.eth.LegacyTx is not mutable"))
	case "goeni.eth.LegacyTx.to":
		panic(fmt.Errorf("field to of message goeni.eth.LegacyTx is not mutable"))
	case "goeni.eth.LegacyTx.value":
		panic(fmt.Errorf("field value of message goeni.eth.LegacyTx is not mutable"))
	case "goeni.eth.LegacyTx.data":
		panic(fmt.Errorf("field data of message goeni.eth.LegacyTx is not mutable"))
	case "goeni.eth.LegacyTx.v":
		panic(fmt.Errorf("field v of message goeni.eth.LegacyTx is not mutable"))
	case "goeni.eth.LegacyTx.r":
		panic(fmt.Errorf("field r of message goeni.eth.LegacyTx is not mutable"))
	case "goeni.eth.LegacyTx.s":
		panic(fmt.Errorf("field s of message goeni.eth.LegacyTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.LegacyTx"))
		}
		panic(fmt.Errorf("message goeni.eth.LegacyTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LegacyTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.LegacyTx.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goeni.eth.LegacyTx.gas_price":
		return protoreflect.ValueOfString("")
	case "goeni.eth.LegacyTx.gas_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goeni.eth.LegacyTx.to":
		return protoreflect.ValueOfString("")
	case "goeni.eth.LegacyTx.value":
		return protoreflect.ValueOfString("")
	case "goeni.eth.LegacyTx.data":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.LegacyTx.v":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.LegacyTx.r":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.LegacyTx.s":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.LegacyTx"))
		}
		panic(fmt.Errorf("message goeni.eth.LegacyTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LegacyTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goeni.eth.LegacyTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LegacyTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LegacyTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LegacyTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LegacyTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		l = len(x.GasPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.GasLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.GasLimit))
		}
		l = len(x.To)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Value)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Data)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.V)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.R)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.S)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LegacyTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.S) > 0 {
			i -= len(x.S)
			copy(dAtA[i:], x.S)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.S)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.R) > 0 {
			i -= len(x.R)
			copy(dAtA[i:], x.R)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.R)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.V) > 0 {
			i -= len(x.V)
			copy(dAtA[i:], x.V)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.V)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Data) > 0 {
			i -= len(x.Data)
			copy(dAtA[i:], x.Data)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Data)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Value) > 0 {
			i -= len(x.Value)
			copy(dAtA[i:], x.Value)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Value)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.To) > 0 {
			i -= len(x.To)
			copy(dAtA[i:], x.To)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.To)))
			i--
			dAtA[i] = 0x22
		}
		if x.GasLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GasLimit))
			i--
			dAtA[i] = 0x18
		}
		if len(x.GasPrice) > 0 {
			i -= len(x.GasPrice)
			copy(dAtA[i:], x.GasPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasPrice)))
			i--
			dAtA[i] = 0x12
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LegacyTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LegacyTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LegacyTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
				}
				x.GasLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GasLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.To = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Value = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = append(x.Data[:0], dAtA[iNdEx:postIndex]...)
				if x.Data == nil {
					x.Data = []byte{}
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.V = append(x.V[:0], dAtA[iNdEx:postIndex]...)
				if x.V == nil {
					x.V = []byte{}
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.R = append(x.R[:0], dAtA[iNdEx:postIndex]...)
				if x.R == nil {
					x.R = []byte{}
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.S = append(x.S[:0], dAtA[iNdEx:postIndex]...)
				if x.S == nil {
					x.S = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_AccessListTx_8_list)(nil)

type _AccessListTx_8_list struct {
	list *[]*AccessTuple
}

func (x *_AccessListTx_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AccessListTx_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AccessListTx_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AccessTuple)
	(*x.list)[i] = concreteValue
}

func (x *_AccessListTx_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AccessTuple)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AccessListTx_8_list) AppendMutable() protoreflect.Value {
	v := new(AccessTuple)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AccessListTx_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AccessListTx_8_list) NewElement() protoreflect.Value {
	v := new(AccessTuple)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AccessListTx_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_AccessListTx           protoreflect.MessageDescriptor
	fd_AccessListTx_chain_id  protoreflect.FieldDescriptor
	fd_AccessListTx_nonce     protoreflect.FieldDescriptor
	fd_AccessListTx_gas_price protoreflect.FieldDescriptor
	fd_AccessListTx_gas_limit protoreflect.FieldDescriptor
	fd_AccessListTx_to        protoreflect.FieldDescriptor
	fd_AccessListTx_value     protoreflect.FieldDescriptor
	fd_AccessListTx_data      protoreflect.FieldDescriptor
	fd_AccessListTx_accesses  protoreflect.FieldDescriptor
	fd_AccessListTx_v         protoreflect.FieldDescriptor
	fd_AccessListTx_r         protoreflect.FieldDescriptor
	fd_AccessListTx_s         protoreflect.FieldDescriptor
)

func init() {
	file_goeni_eth_tx_proto_init()
	md_AccessListTx = File_goeni_eth_tx_proto.Messages().ByName("AccessListTx")
	fd_AccessListTx_chain_id = md_AccessListTx.Fields().ByName("chain_id")
	fd_AccessListTx_nonce = md_AccessListTx.Fields().ByName("nonce")
	fd_AccessListTx_gas_price = md_AccessListTx.Fields().ByName("gas_price")
	fd_AccessListTx_gas_limit = md_AccessListTx.Fields().ByName("gas_limit")
	fd_AccessListTx_to = md_AccessListTx.Fields().ByName("to")
	fd_AccessListTx_value = md_AccessListTx.Fields().ByName("value")
	fd_AccessListTx_data = md_AccessListTx.Fields().ByName("data")
	fd_AccessListTx_accesses = md_AccessListTx.Fields().ByName("accesses")
	fd_AccessListTx_v = md_AccessListTx.Fields().ByName("v")
	fd_AccessListTx_r = md_AccessListTx.Fields().ByName("r")
	fd_AccessListTx_s = md_AccessListTx.Fields().ByName("s")
}

var _ protoreflect.Message = (*fastReflection_AccessListTx)(nil)

type fastReflection_AccessListTx AccessListTx

func (x *AccessListTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AccessListTx)(x)
}

func (x *AccessListTx) slowProtoReflect() protoreflect.Message {
	mi := &file_goeni_eth_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AccessListTx_messageType fastReflection_AccessListTx_messageType
var _ protoreflect.MessageType = fastReflection_AccessListTx_messageType{}

type fastReflection_AccessListTx_messageType struct{}

func (x fastReflection_AccessListTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AccessListTx)(nil)
}
func (x fastReflection_AccessListTx_messageType) New() protoreflect.Message {
	return new(fastReflection_AccessListTx)
}
func (x fastReflection_AccessListTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AccessListTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AccessListTx) Descriptor() protoreflect.MessageDescriptor {
	return md_AccessListTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AccessListTx) Type() protoreflect.MessageType {
	return _fastReflection_AccessListTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AccessListTx) New() protoreflect.Message {
	return new(fastReflection_AccessListTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AccessListTx) Interface() protoreflect.ProtoMessage {
	return (*AccessListTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AccessListTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ChainId != "" {
		value := protoreflect.ValueOfString(x.ChainId)
		if !f(fd_AccessListTx_chain_id, value) {
			return
		}
	}
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_AccessListTx_nonce, value) {
			return
		}
	}
	if x.GasPrice != "" {
		value := protoreflect.ValueOfString(x.GasPrice)
		if !f(fd_AccessListTx_gas_price, value) {
			return
		}
	}
	if x.GasLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GasLimit)
		if !f(fd_AccessListTx_gas_limit, value) {
			return
		}
	}
	if x.To != "" {
		value := protoreflect.ValueOfString(x.To)
		if !f(fd_AccessListTx_to, value) {
			return
		}
	}
	if x.Value != "" {
		value := protoreflect.ValueOfString(x.Value)
		if !f(fd_AccessListTx_value, value) {
			return
		}
	}
	if len(x.Data) != 0 {
		value := protoreflect.ValueOfBytes(x.Data)
		if !f(fd_AccessListTx_data, value) {
			return
		}
	}
	if len(x.Accesses) != 0 {
		value := protoreflect.ValueOfList(&_AccessListTx_8_list{list: &x.Accesses})
		if !f(fd_AccessListTx_accesses, value) {
			return
		}
	}
	if len(x.V) != 0 {
		value := protoreflect.ValueOfBytes(x.V)
		if !f(fd_AccessListTx_v, value) {
			return
		}
	}
	if len(x.R) != 0 {
		value := protoreflect.ValueOfBytes(x.R)
		if !f(fd_AccessListTx_r, value) {
			return
		}
	}
	if len(x.S) != 0 {
		value := protoreflect.ValueOfBytes(x.S)
		if !f(fd_AccessListTx_s, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AccessListTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goeni.eth.AccessListTx.chain_id":
		return x.ChainId != ""
	case "goeni.eth.AccessListTx.nonce":
		return x.Nonce != uint64(0)
	case "goeni.eth.AccessListTx.gas_price":
		return x.GasPrice != ""
	case "goeni.eth.AccessListTx.gas_limit":
		return x.GasLimit != uint64(0)
	case "goeni.eth.AccessListTx.to":
		return x.To != ""
	case "goeni.eth.AccessListTx.value":
		return x.Value != ""
	case "goeni.eth.AccessListTx.data":
		return len(x.Data) != 0
	case "goeni.eth.AccessListTx.accesses":
		return len(x.Accesses) != 0
	case "goeni.eth.AccessListTx.v":
		return len(x.V) != 0
	case "goeni.eth.AccessListTx.r":
		return len(x.R) != 0
	case "goeni.eth.AccessListTx.s":
		return len(x.S) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessListTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessListTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccessListTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goeni.eth.AccessListTx.chain_id":
		x.ChainId = ""
	case "goeni.eth.AccessListTx.nonce":
		x.Nonce = uint64(0)
	case "goeni.eth.AccessListTx.gas_price":
		x.GasPrice = ""
	case "goeni.eth.AccessListTx.gas_limit":
		x.GasLimit = uint64(0)
	case "goeni.eth.AccessListTx.to":
		x.To = ""
	case "goeni.eth.AccessListTx.value":
		x.Value = ""
	case "goeni.eth.AccessListTx.data":
		x.Data = nil
	case "goeni.eth.AccessListTx.accesses":
		x.Accesses = nil
	case "goeni.eth.AccessListTx.v":
		x.V = nil
	case "goeni.eth.AccessListTx.r":
		x.R = nil
	case "goeni.eth.AccessListTx.s":
		x.S = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessListTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessListTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AccessListTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goeni.eth.AccessListTx.chain_id":
		value := x.ChainId
		return protoreflect.ValueOfString(value)
	case "goeni.eth.AccessListTx.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	case "goeni.eth.AccessListTx.gas_price":
		value := x.GasPrice
		return protoreflect.ValueOfString(value)
	case "goeni.eth.AccessListTx.gas_limit":
		value := x.GasLimit
		return protoreflect.ValueOfUint64(value)
	case "goeni.eth.AccessListTx.to":
		value := x.To
		return protoreflect.ValueOfString(value)
	case "goeni.eth.AccessListTx.value":
		value := x.Value
		return protoreflect.ValueOfString(value)
	case "goeni.eth.AccessListTx.data":
		value := x.Data
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.AccessListTx.accesses":
		if len(x.Accesses) == 0 {
			return protoreflect.ValueOfList(&_AccessListTx_8_list{})
		}
		listValue := &_AccessListTx_8_list{list: &x.Accesses}
		return protoreflect.ValueOfList(listValue)
	case "goeni.eth.AccessListTx.v":
		value := x.V
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.AccessListTx.r":
		value := x.R
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.AccessListTx.s":
		value := x.S
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessListTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessListTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccessListTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goeni.eth.AccessListTx.chain_id":
		x.ChainId = value.Interface().(string)
	case "goeni.eth.AccessListTx.nonce":
		x.Nonce = value.Uint()
	case "goeni.eth.AccessListTx.gas_price":
		x.GasPrice = value.Interface().(string)
	case "goeni.eth.AccessListTx.gas_limit":
		x.GasLimit = value.Uint()
	case "goeni.eth.AccessListTx.to":
		x.To = value.Interface().(string)
	case "goeni.eth.AccessListTx.value":
		x.Value = value.Interface().(string)
	case "goeni.eth.AccessListTx.data":
		x.Data = value.Bytes()
	case "goeni.eth.AccessListTx.accesses":
		lv := value.List()
		clv := lv.(*_AccessListTx_8_list)
		x.Accesses = *clv.list
	case "goeni.eth.AccessListTx.v":
		x.V = value.Bytes()
	case "goeni.eth.AccessListTx.r":
		x.R = value.Bytes()
	case "goeni.eth.AccessListTx.s":
		x.S = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessListTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessListTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccessListTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.AccessListTx.accesses":
		if x.Accesses == nil {
			x.Accesses = []*AccessTuple{}
		}
		value := &_AccessListTx_8_list{list: &x.Accesses}
		return protoreflect.ValueOfList(value)
	case "goeni.eth.AccessListTx.chain_id":
		panic(fmt.Errorf("field chain_id of message goeni.eth.AccessListTx is not mutable"))
	case "goeni.eth.AccessListTx.nonce":
		panic(fmt.Errorf("field nonce of message goeni.eth.AccessListTx is not mutable"))
	case "goeni.eth.AccessListTx.gas_price":
		panic(fmt.Errorf("field gas_price of message goeni.eth.AccessListTx is not mutable"))
	case "goeni.eth.AccessListTx.gas_limit":
		panic(fmt.Errorf("field gas_limit of message goeni.eth.AccessListTx is not mutable"))
	case "goeni.eth.AccessListTx.to":
		panic(fmt.Errorf("field to of message goeni.eth.AccessListTx is not mutable"))
	case "goeni.eth.AccessListTx.value":
		panic(fmt.Errorf("field value of message goeni.eth.AccessListTx is not mutable"))
	case "goeni.eth.AccessListTx.data":
		panic(fmt.Errorf("field data of message goeni.eth.AccessListTx is not mutable"))
	case "goeni.eth.AccessListTx.v":
		panic(fmt.Errorf("field v of message goeni.eth.AccessListTx is not mutable"))
	case "goeni.eth.AccessListTx.r":
		panic(fmt.Errorf("field r of message goeni.eth.AccessListTx is not mutable"))
	case "goeni.eth.AccessListTx.s":
		panic(fmt.Errorf("field s of message goeni.eth.AccessListTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessListTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessListTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AccessListTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.AccessListTx.chain_id":
		return protoreflect.ValueOfString("")
	case "goeni.eth.AccessListTx.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goeni.eth.AccessListTx.gas_price":
		return protoreflect.ValueOfString("")
	case "goeni.eth.AccessListTx.gas_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goeni.eth.AccessListTx.to":
		return protoreflect.ValueOfString("")
	case "goeni.eth.AccessListTx.value":
		return protoreflect.ValueOfString("")
	case "goeni.eth.AccessListTx.data":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.AccessListTx.accesses":
		list := []*AccessTuple{}
		return protoreflect.ValueOfList(&_AccessListTx_8_list{list: &list})
	case "goeni.eth.AccessListTx.v":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.AccessListTx.r":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.AccessListTx.s":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.AccessListTx"))
		}
		panic(fmt.Errorf("message goeni.eth.AccessListTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AccessListTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goeni.eth.AccessListTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AccessListTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccessListTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AccessListTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AccessListTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AccessListTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		l = len(x.GasPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.GasLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.GasLimit))
		}
		l = len(x.To)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Value)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Data)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Accesses) > 0 {
			for _, e := range x.Accesses {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.V)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.R)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.S)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AccessListTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.S) > 0 {
			i -= len(x.S)
			copy(dAtA[i:], x.S)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.S)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.R) > 0 {
			i -= len(x.R)
			copy(dAtA[i:], x.R)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.R)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.V) > 0 {
			i -= len(x.V)
			copy(dAtA[i:], x.V)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.V)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.Accesses) > 0 {
			for iNdEx := len(x.Accesses) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Accesses[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.Data) > 0 {
			i -= len(x.Data)
			copy(dAtA[i:], x.Data)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Data)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Value) > 0 {
			i -= len(x.Value)
			copy(dAtA[i:], x.Value)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Value)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.To) > 0 {
			i -= len(x.To)
			copy(dAtA[i:], x.To)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.To)))
			i--
			dAtA[i] = 0x2a
		}
		if x.GasLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GasLimit))
			i--
			dAtA[i] = 0x20
		}
		if len(x.GasPrice) > 0 {
			i -= len(x.GasPrice)
			copy(dAtA[i:], x.GasPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasPrice)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x10
		}
		if len(x.ChainId) > 0 {
			i -= len(x.ChainId)
			copy(dAtA[i:], x.ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChainId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AccessListTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AccessListTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AccessListTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
				}
				x.GasLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GasLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.To = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Value = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = append(x.Data[:0], dAtA[iNdEx:postIndex]...)
				if x.Data == nil {
					x.Data = []byte{}
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Accesses", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Accesses = append(x.Accesses, &AccessTuple{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Accesses[len(x.Accesses)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.V = append(x.V[:0], dAtA[iNdEx:postIndex]...)
				if x.V == nil {
					x.V = []byte{}
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.R = append(x.R[:0], dAtA[iNdEx:postIndex]...)
				if x.R == nil {
					x.R = []byte{}
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.S = append(x.S[:0], dAtA[iNdEx:postIndex]...)
				if x.S == nil {
					x.S = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_DynamicFeeTx_9_list)(nil)

type _DynamicFeeTx_9_list struct {
	list *[]*AccessTuple
}

func (x *_DynamicFeeTx_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DynamicFeeTx_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_DynamicFeeTx_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AccessTuple)
	(*x.list)[i] = concreteValue
}

func (x *_DynamicFeeTx_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AccessTuple)
	*x.list = append(*x.list, concreteValue)
}

func (x *_DynamicFeeTx_9_list) AppendMutable() protoreflect.Value {
	v := new(AccessTuple)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DynamicFeeTx_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_DynamicFeeTx_9_list) NewElement() protoreflect.Value {
	v := new(AccessTuple)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DynamicFeeTx_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_DynamicFeeTx             protoreflect.MessageDescriptor
	fd_DynamicFeeTx_chain_id    protoreflect.FieldDescriptor
	fd_DynamicFeeTx_nonce       protoreflect.FieldDescriptor
	fd_DynamicFeeTx_gas_tip_cap protoreflect.FieldDescriptor
	fd_DynamicFeeTx_gas_fee_cap protoreflect.FieldDescriptor
	fd_DynamicFeeTx_gas_limit   protoreflect.FieldDescriptor
	fd_DynamicFeeTx_to          protoreflect.FieldDescriptor
	fd_DynamicFeeTx_value       protoreflect.FieldDescriptor
	fd_DynamicFeeTx_data        protoreflect.FieldDescriptor
	fd_DynamicFeeTx_accesses    protoreflect.FieldDescriptor
	fd_DynamicFeeTx_v           protoreflect.FieldDescriptor
	fd_DynamicFeeTx_r           protoreflect.FieldDescriptor
	fd_DynamicFeeTx_s           protoreflect.FieldDescriptor
)

func init() {
	file_goeni_eth_tx_proto_init()
	md_DynamicFeeTx = File_goeni_eth_tx_proto.Messages().ByName("DynamicFeeTx")
	fd_DynamicFeeTx_chain_id = md_DynamicFeeTx.Fields().ByName("chain_id")
	fd_DynamicFeeTx_nonce = md_DynamicFeeTx.Fields().ByName("nonce")
	fd_DynamicFeeTx_gas_tip_cap = md_DynamicFeeTx.Fields().ByName("gas_tip_cap")
	fd_DynamicFeeTx_gas_fee_cap = md_DynamicFeeTx.Fields().ByName("gas_fee_cap")
	fd_DynamicFeeTx_gas_limit = md_DynamicFeeTx.Fields().ByName("gas_limit")
	fd_DynamicFeeTx_to = md_DynamicFeeTx.Fields().ByName("to")
	fd_DynamicFeeTx_value = md_DynamicFeeTx.Fields().ByName("value")
	fd_DynamicFeeTx_data = md_DynamicFeeTx.Fields().ByName("data")
	fd_DynamicFeeTx_accesses = md_DynamicFeeTx.Fields().ByName("accesses")
	fd_DynamicFeeTx_v = md_DynamicFeeTx.Fields().ByName("v")
	fd_DynamicFeeTx_r = md_DynamicFeeTx.Fields().ByName("r")
	fd_DynamicFeeTx_s = md_DynamicFeeTx.Fields().ByName("s")
}

var _ protoreflect.Message = (*fastReflection_DynamicFeeTx)(nil)

type fastReflection_DynamicFeeTx DynamicFeeTx

func (x *DynamicFeeTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DynamicFeeTx)(x)
}

func (x *DynamicFeeTx) slowProtoReflect() protoreflect.Message {
	mi := &file_goeni_eth_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DynamicFeeTx_messageType fastReflection_DynamicFeeTx_messageType
var _ protoreflect.MessageType = fastReflection_DynamicFeeTx_messageType{}

type fastReflection_DynamicFeeTx_messageType struct{}

func (x fastReflection_DynamicFeeTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DynamicFeeTx)(nil)
}
func (x fastReflection_DynamicFeeTx_messageType) New() protoreflect.Message {
	return new(fastReflection_DynamicFeeTx)
}
func (x fastReflection_DynamicFeeTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DynamicFeeTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DynamicFeeTx) Descriptor() protoreflect.MessageDescriptor {
	return md_DynamicFeeTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DynamicFeeTx) Type() protoreflect.MessageType {
	return _fastReflection_DynamicFeeTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DynamicFeeTx) New() protoreflect.Message {
	return new(fastReflection_DynamicFeeTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DynamicFeeTx) Interface() protoreflect.ProtoMessage {
	return (*DynamicFeeTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DynamicFeeTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ChainId != "" {
		value := protoreflect.ValueOfString(x.ChainId)
		if !f(fd_DynamicFeeTx_chain_id, value) {
			return
		}
	}
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_DynamicFeeTx_nonce, value) {
			return
		}
	}
	if x.GasTipCap != "" {
		value := protoreflect.ValueOfString(x.GasTipCap)
		if !f(fd_DynamicFeeTx_gas_tip_cap, value) {
			return
		}
	}
	if x.GasFeeCap != "" {
		value := protoreflect.ValueOfString(x.GasFeeCap)
		if !f(fd_DynamicFeeTx_gas_fee_cap, value) {
			return
		}
	}
	if x.GasLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GasLimit)
		if !f(fd_DynamicFeeTx_gas_limit, value) {
			return
		}
	}
	if x.To != "" {
		value := protoreflect.ValueOfString(x.To)
		if !f(fd_DynamicFeeTx_to, value) {
			return
		}
	}
	if x.Value != "" {
		value := protoreflect.ValueOfString(x.Value)
		if !f(fd_DynamicFeeTx_value, value) {
			return
		}
	}
	if len(x.Data) != 0 {
		value := protoreflect.ValueOfBytes(x.Data)
		if !f(fd_DynamicFeeTx_data, value) {
			return
		}
	}
	if len(x.Accesses) != 0 {
		value := protoreflect.ValueOfList(&_DynamicFeeTx_9_list{list: &x.Accesses})
		if !f(fd_DynamicFeeTx_accesses, value) {
			return
		}
	}
	if len(x.V) != 0 {
		value := protoreflect.ValueOfBytes(x.V)
		if !f(fd_DynamicFeeTx_v, value) {
			return
		}
	}
	if len(x.R) != 0 {
		value := protoreflect.ValueOfBytes(x.R)
		if !f(fd_DynamicFeeTx_r, value) {
			return
		}
	}
	if len(x.S) != 0 {
		value := protoreflect.ValueOfBytes(x.S)
		if !f(fd_DynamicFeeTx_s, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DynamicFeeTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goeni.eth.DynamicFeeTx.chain_id":
		return x.ChainId != ""
	case "goeni.eth.DynamicFeeTx.nonce":
		return x.Nonce != uint64(0)
	case "goeni.eth.DynamicFeeTx.gas_tip_cap":
		return x.GasTipCap != ""
	case "goeni.eth.DynamicFeeTx.gas_fee_cap":
		return x.GasFeeCap != ""
	case "goeni.eth.DynamicFeeTx.gas_limit":
		return x.GasLimit != uint64(0)
	case "goeni.eth.DynamicFeeTx.to":
		return x.To != ""
	case "goeni.eth.DynamicFeeTx.value":
		return x.Value != ""
	case "goeni.eth.DynamicFeeTx.data":
		return len(x.Data) != 0
	case "goeni.eth.DynamicFeeTx.accesses":
		return len(x.Accesses) != 0
	case "goeni.eth.DynamicFeeTx.v":
		return len(x.V) != 0
	case "goeni.eth.DynamicFeeTx.r":
		return len(x.R) != 0
	case "goeni.eth.DynamicFeeTx.s":
		return len(x.S) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.DynamicFeeTx"))
		}
		panic(fmt.Errorf("message goeni.eth.DynamicFeeTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DynamicFeeTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goeni.eth.DynamicFeeTx.chain_id":
		x.ChainId = ""
	case "goeni.eth.DynamicFeeTx.nonce":
		x.Nonce = uint64(0)
	case "goeni.eth.DynamicFeeTx.gas_tip_cap":
		x.GasTipCap = ""
	case "goeni.eth.DynamicFeeTx.gas_fee_cap":
		x.GasFeeCap = ""
	case "goeni.eth.DynamicFeeTx.gas_limit":
		x.GasLimit = uint64(0)
	case "goeni.eth.DynamicFeeTx.to":
		x.To = ""
	case "goeni.eth.DynamicFeeTx.value":
		x.Value = ""
	case "goeni.eth.DynamicFeeTx.data":
		x.Data = nil
	case "goeni.eth.DynamicFeeTx.accesses":
		x.Accesses = nil
	case "goeni.eth.DynamicFeeTx.v":
		x.V = nil
	case "goeni.eth.DynamicFeeTx.r":
		x.R = nil
	case "goeni.eth.DynamicFeeTx.s":
		x.S = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.DynamicFeeTx"))
		}
		panic(fmt.Errorf("message goeni.eth.DynamicFeeTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DynamicFeeTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goeni.eth.DynamicFeeTx.chain_id":
		value := x.ChainId
		return protoreflect.ValueOfString(value)
	case "goeni.eth.DynamicFeeTx.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	case "goeni.eth.DynamicFeeTx.gas_tip_cap":
		value := x.GasTipCap
		return protoreflect.ValueOfString(value)
	case "goeni.eth.DynamicFeeTx.gas_fee_cap":
		value := x.GasFeeCap
		return protoreflect.ValueOfString(value)
	case "goeni.eth.DynamicFeeTx.gas_limit":
		value := x.GasLimit
		return protoreflect.ValueOfUint64(value)
	case "goeni.eth.DynamicFeeTx.to":
		value := x.To
		return protoreflect.ValueOfString(value)
	case "goeni.eth.DynamicFeeTx.value":
		value := x.Value
		return protoreflect.ValueOfString(value)
	case "goeni.eth.DynamicFeeTx.data":
		value := x.Data
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.DynamicFeeTx.accesses":
		if len(x.Accesses) == 0 {
			return protoreflect.ValueOfList(&_DynamicFeeTx_9_list{})
		}
		listValue := &_DynamicFeeTx_9_list{list: &x.Accesses}
		return protoreflect.ValueOfList(listValue)
	case "goeni.eth.DynamicFeeTx.v":
		value := x.V
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.DynamicFeeTx.r":
		value := x.R
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.DynamicFeeTx.s":
		value := x.S
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.DynamicFeeTx"))
		}
		panic(fmt.Errorf("message goeni.eth.DynamicFeeTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DynamicFeeTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goeni.eth.DynamicFeeTx.chain_id":
		x.ChainId = value.Interface().(string)
	case "goeni.eth.DynamicFeeTx.nonce":
		x.Nonce = value.Uint()
	case "goeni.eth.DynamicFeeTx.gas_tip_cap":
		x.GasTipCap = value.Interface().(string)
	case "goeni.eth.DynamicFeeTx.gas_fee_cap":
		x.GasFeeCap = value.Interface().(string)
	case "goeni.eth.DynamicFeeTx.gas_limit":
		x.GasLimit = value.Uint()
	case "goeni.eth.DynamicFeeTx.to":
		x.To = value.Interface().(string)
	case "goeni.eth.DynamicFeeTx.value":
		x.Value = value.Interface().(string)
	case "goeni.eth.DynamicFeeTx.data":
		x.Data = value.Bytes()
	case "goeni.eth.DynamicFeeTx.accesses":
		lv := value.List()
		clv := lv.(*_DynamicFeeTx_9_list)
		x.Accesses = *clv.list
	case "goeni.eth.DynamicFeeTx.v":
		x.V = value.Bytes()
	case "goeni.eth.DynamicFeeTx.r":
		x.R = value.Bytes()
	case "goeni.eth.DynamicFeeTx.s":
		x.S = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.DynamicFeeTx"))
		}
		panic(fmt.Errorf("message goeni.eth.DynamicFeeTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DynamicFeeTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.DynamicFeeTx.accesses":
		if x.Accesses == nil {
			x.Accesses = []*AccessTuple{}
		}
		value := &_DynamicFeeTx_9_list{list: &x.Accesses}
		return protoreflect.ValueOfList(value)
	case "goeni.eth.DynamicFeeTx.chain_id":
		panic(fmt.Errorf("field chain_id of message goeni.eth.DynamicFeeTx is not mutable"))
	case "goeni.eth.DynamicFeeTx.nonce":
		panic(fmt.Errorf("field nonce of message goeni.eth.DynamicFeeTx is not mutable"))
	case "goeni.eth.DynamicFeeTx.gas_tip_cap":
		panic(fmt.Errorf("field gas_tip_cap of message goeni.eth.DynamicFeeTx is not mutable"))
	case "goeni.eth.DynamicFeeTx.gas_fee_cap":
		panic(fmt.Errorf("field gas_fee_cap of message goeni.eth.DynamicFeeTx is not mutable"))
	case "goeni.eth.DynamicFeeTx.gas_limit":
		panic(fmt.Errorf("field gas_limit of message goeni.eth.DynamicFeeTx is not mutable"))
	case "goeni.eth.DynamicFeeTx.to":
		panic(fmt.Errorf("field to of message goeni.eth.DynamicFeeTx is not mutable"))
	case "goeni.eth.DynamicFeeTx.value":
		panic(fmt.Errorf("field value of message goeni.eth.DynamicFeeTx is not mutable"))
	case "goeni.eth.DynamicFeeTx.data":
		panic(fmt.Errorf("field data of message goeni.eth.DynamicFeeTx is not mutable"))
	case "goeni.eth.DynamicFeeTx.v":
		panic(fmt.Errorf("field v of message goeni.eth.DynamicFeeTx is not mutable"))
	case "goeni.eth.DynamicFeeTx.r":
		panic(fmt.Errorf("field r of message goeni.eth.DynamicFeeTx is not mutable"))
	case "goeni.eth.DynamicFeeTx.s":
		panic(fmt.Errorf("field s of message goeni.eth.DynamicFeeTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.DynamicFeeTx"))
		}
		panic(fmt.Errorf("message goeni.eth.DynamicFeeTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DynamicFeeTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.DynamicFeeTx.chain_id":
		return protoreflect.ValueOfString("")
	case "goeni.eth.DynamicFeeTx.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goeni.eth.DynamicFeeTx.gas_tip_cap":
		return protoreflect.ValueOfString("")
	case "goeni.eth.DynamicFeeTx.gas_fee_cap":
		return protoreflect.ValueOfString("")
	case "goeni.eth.DynamicFeeTx.gas_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goeni.eth.DynamicFeeTx.to":
		return protoreflect.ValueOfString("")
	case "goeni.eth.DynamicFeeTx.value":
		return protoreflect.ValueOfString("")
	case "goeni.eth.DynamicFeeTx.data":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.DynamicFeeTx.accesses":
		list := []*AccessTuple{}
		return protoreflect.ValueOfList(&_DynamicFeeTx_9_list{list: &list})
	case "goeni.eth.DynamicFeeTx.v":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.DynamicFeeTx.r":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.DynamicFeeTx.s":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.DynamicFeeTx"))
		}
		panic(fmt.Errorf("message goeni.eth.DynamicFeeTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DynamicFeeTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goeni.eth.DynamicFeeTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DynamicFeeTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DynamicFeeTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DynamicFeeTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DynamicFeeTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DynamicFeeTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		l = len(x.GasTipCap)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.GasFeeCap)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.GasLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.GasLimit))
		}
		l = len(x.To)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Value)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Data)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Accesses) > 0 {
			for _, e := range x.Accesses {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.V)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.R)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.S)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DynamicFeeTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.S) > 0 {
			i -= len(x.S)
			copy(dAtA[i:], x.S)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.S)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.R) > 0 {
			i -= len(x.R)
			copy(dAtA[i:], x.R)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.R)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.V) > 0 {
			i -= len(x.V)
			copy(dAtA[i:], x.V)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.V)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.Accesses) > 0 {
			for iNdEx := len(x.Accesses) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Accesses[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.Data) > 0 {
			i -= len(x.Data)
			copy(dAtA[i:], x.Data)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Data)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Value) > 0 {
			i -= len(x.Value)
			copy(dAtA[i:], x.Value)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Value)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.To) > 0 {
			i -= len(x.To)
			copy(dAtA[i:], x.To)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.To)))
			i--
			dAtA[i] = 0x32
		}
		if x.GasLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GasLimit))
			i--
			dAtA[i] = 0x28
		}
		if len(x.GasFeeCap) > 0 {
			i -= len(x.GasFeeCap)
			copy(dAtA[i:], x.GasFeeCap)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasFeeCap)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.GasTipCap) > 0 {
			i -= len(x.GasTipCap)
			copy(dAtA[i:], x.GasTipCap)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasTipCap)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x10
		}
		if len(x.ChainId) > 0 {
			i -= len(x.ChainId)
			copy(dAtA[i:], x.ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChainId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DynamicFeeTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DynamicFeeTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DynamicFeeTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasTipCap", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasTipCap = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasFeeCap", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasFeeCap = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
				}
				x.GasLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GasLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.To = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Value = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = append(x.Data[:0], dAtA[iNdEx:postIndex]...)
				if x.Data == nil {
					x.Data = []byte{}
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Accesses", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Accesses = append(x.Accesses, &AccessTuple{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Accesses[len(x.Accesses)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.V = append(x.V[:0], dAtA[iNdEx:postIndex]...)
				if x.V == nil {
					x.V = []byte{}
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.R = append(x.R[:0], dAtA[iNdEx:postIndex]...)
				if x.R == nil {
					x.R = []byte{}
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.S = append(x.S[:0], dAtA[iNdEx:postIndex]...)
				if x.S == nil {
					x.S = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_BlobTx_9_list)(nil)

type _BlobTx_9_list struct {
	list *[]*AccessTuple
}

func (x *_BlobTx_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BlobTx_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_BlobTx_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AccessTuple)
	(*x.list)[i] = concreteValue
}

func (x *_BlobTx_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AccessTuple)
	*x.list = append(*x.list, concreteValue)
}

func (x *_BlobTx_9_list) AppendMutable() protoreflect.Value {
	v := new(AccessTuple)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BlobTx_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_BlobTx_9_list) NewElement() protoreflect.Value {
	v := new(AccessTuple)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BlobTx_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_BlobTx_11_list)(nil)

type _BlobTx_11_list struct {
	list *[][]byte
}

func (x *_BlobTx_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BlobTx_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_BlobTx_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_BlobTx_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_BlobTx_11_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message BlobTx at list field BlobHashes as it is not of Message kind"))
}

func (x *_BlobTx_11_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_BlobTx_11_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_BlobTx_11_list) IsValid() bool {
	return x.list != nil
}

var (
	md_BlobTx              protoreflect.MessageDescriptor
	fd_BlobTx_chain_id     protoreflect.FieldDescriptor
	fd_BlobTx_nonce        protoreflect.FieldDescriptor
	fd_BlobTx_gas_tip_cap  protoreflect.FieldDescriptor
	fd_BlobTx_gas_fee_cap  protoreflect.FieldDescriptor
	fd_BlobTx_gas_limit    protoreflect.FieldDescriptor
	fd_BlobTx_to           protoreflect.FieldDescriptor
	fd_BlobTx_value        protoreflect.FieldDescriptor
	fd_BlobTx_data         protoreflect.FieldDescriptor
	fd_BlobTx_accesses     protoreflect.FieldDescriptor
	fd_BlobTx_blob_fee_cap protoreflect.FieldDescriptor
	fd_BlobTx_blob_hashes  protoreflect.FieldDescriptor
	fd_BlobTx_sidecar      protoreflect.FieldDescriptor
	fd_BlobTx_v            protoreflect.FieldDescriptor
	fd_BlobTx_r            protoreflect.FieldDescriptor
	fd_BlobTx_s            protoreflect.FieldDescriptor
)

func init() {
	file_goeni_eth_tx_proto_init()
	md_BlobTx = File_goeni_eth_tx_proto.Messages().ByName("BlobTx")
	fd_BlobTx_chain_id = md_BlobTx.Fields().ByName("chain_id")
	fd_BlobTx_nonce = md_BlobTx.Fields().ByName("nonce")
	fd_BlobTx_gas_tip_cap = md_BlobTx.Fields().ByName("gas_tip_cap")
	fd_BlobTx_gas_fee_cap = md_BlobTx.Fields().ByName("gas_fee_cap")
	fd_BlobTx_gas_limit = md_BlobTx.Fields().ByName("gas_limit")
	fd_BlobTx_to = md_BlobTx.Fields().ByName("to")
	fd_BlobTx_value = md_BlobTx.Fields().ByName("value")
	fd_BlobTx_data = md_BlobTx.Fields().ByName("data")
	fd_BlobTx_accesses = md_BlobTx.Fields().ByName("accesses")
	fd_BlobTx_blob_fee_cap = md_BlobTx.Fields().ByName("blob_fee_cap")
	fd_BlobTx_blob_hashes = md_BlobTx.Fields().ByName("blob_hashes")
	fd_BlobTx_sidecar = md_BlobTx.Fields().ByName("sidecar")
	fd_BlobTx_v = md_BlobTx.Fields().ByName("v")
	fd_BlobTx_r = md_BlobTx.Fields().ByName("r")
	fd_BlobTx_s = md_BlobTx.Fields().ByName("s")
}

var _ protoreflect.Message = (*fastReflection_BlobTx)(nil)

type fastReflection_BlobTx BlobTx

func (x *BlobTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BlobTx)(x)
}

func (x *BlobTx) slowProtoReflect() protoreflect.Message {
	mi := &file_goeni_eth_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BlobTx_messageType fastReflection_BlobTx_messageType
var _ protoreflect.MessageType = fastReflection_BlobTx_messageType{}

type fastReflection_BlobTx_messageType struct{}

func (x fastReflection_BlobTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BlobTx)(nil)
}
func (x fastReflection_BlobTx_messageType) New() protoreflect.Message {
	return new(fastReflection_BlobTx)
}
func (x fastReflection_BlobTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BlobTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BlobTx) Descriptor() protoreflect.MessageDescriptor {
	return md_BlobTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BlobTx) Type() protoreflect.MessageType {
	return _fastReflection_BlobTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BlobTx) New() protoreflect.Message {
	return new(fastReflection_BlobTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BlobTx) Interface() protoreflect.ProtoMessage {
	return (*BlobTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BlobTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ChainId != "" {
		value := protoreflect.ValueOfString(x.ChainId)
		if !f(fd_BlobTx_chain_id, value) {
			return
		}
	}
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_BlobTx_nonce, value) {
			return
		}
	}
	if x.GasTipCap != "" {
		value := protoreflect.ValueOfString(x.GasTipCap)
		if !f(fd_BlobTx_gas_tip_cap, value) {
			return
		}
	}
	if x.GasFeeCap != "" {
		value := protoreflect.ValueOfString(x.GasFeeCap)
		if !f(fd_BlobTx_gas_fee_cap, value) {
			return
		}
	}
	if x.GasLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GasLimit)
		if !f(fd_BlobTx_gas_limit, value) {
			return
		}
	}
	if x.To != "" {
		value := protoreflect.ValueOfString(x.To)
		if !f(fd_BlobTx_to, value) {
			return
		}
	}
	if x.Value != "" {
		value := protoreflect.ValueOfString(x.Value)
		if !f(fd_BlobTx_value, value) {
			return
		}
	}
	if len(x.Data) != 0 {
		value := protoreflect.ValueOfBytes(x.Data)
		if !f(fd_BlobTx_data, value) {
			return
		}
	}
	if len(x.Accesses) != 0 {
		value := protoreflect.ValueOfList(&_BlobTx_9_list{list: &x.Accesses})
		if !f(fd_BlobTx_accesses, value) {
			return
		}
	}
	if x.BlobFeeCap != "" {
		value := protoreflect.ValueOfString(x.BlobFeeCap)
		if !f(fd_BlobTx_blob_fee_cap, value) {
			return
		}
	}
	if len(x.BlobHashes) != 0 {
		value := protoreflect.ValueOfList(&_BlobTx_11_list{list: &x.BlobHashes})
		if !f(fd_BlobTx_blob_hashes, value) {
			return
		}
	}
	if x.Sidecar != nil {
		value := protoreflect.ValueOfMessage(x.Sidecar.ProtoReflect())
		if !f(fd_BlobTx_sidecar, value) {
			return
		}
	}
	if len(x.V) != 0 {
		value := protoreflect.ValueOfBytes(x.V)
		if !f(fd_BlobTx_v, value) {
			return
		}
	}
	if len(x.R) != 0 {
		value := protoreflect.ValueOfBytes(x.R)
		if !f(fd_BlobTx_r, value) {
			return
		}
	}
	if len(x.S) != 0 {
		value := protoreflect.ValueOfBytes(x.S)
		if !f(fd_BlobTx_s, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BlobTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goeni.eth.BlobTx.chain_id":
		return x.ChainId != ""
	case "goeni.eth.BlobTx.nonce":
		return x.Nonce != uint64(0)
	case "goeni.eth.BlobTx.gas_tip_cap":
		return x.GasTipCap != ""
	case "goeni.eth.BlobTx.gas_fee_cap":
		return x.GasFeeCap != ""
	case "goeni.eth.BlobTx.gas_limit":
		return x.GasLimit != uint64(0)
	case "goeni.eth.BlobTx.to":
		return x.To != ""
	case "goeni.eth.BlobTx.value":
		return x.Value != ""
	case "goeni.eth.BlobTx.data":
		return len(x.Data) != 0
	case "goeni.eth.BlobTx.accesses":
		return len(x.Accesses) != 0
	case "goeni.eth.BlobTx.blob_fee_cap":
		return x.BlobFeeCap != ""
	case "goeni.eth.BlobTx.blob_hashes":
		return len(x.BlobHashes) != 0
	case "goeni.eth.BlobTx.sidecar":
		return x.Sidecar != nil
	case "goeni.eth.BlobTx.v":
		return len(x.V) != 0
	case "goeni.eth.BlobTx.r":
		return len(x.R) != 0
	case "goeni.eth.BlobTx.s":
		return len(x.S) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTx"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goeni.eth.BlobTx.chain_id":
		x.ChainId = ""
	case "goeni.eth.BlobTx.nonce":
		x.Nonce = uint64(0)
	case "goeni.eth.BlobTx.gas_tip_cap":
		x.GasTipCap = ""
	case "goeni.eth.BlobTx.gas_fee_cap":
		x.GasFeeCap = ""
	case "goeni.eth.BlobTx.gas_limit":
		x.GasLimit = uint64(0)
	case "goeni.eth.BlobTx.to":
		x.To = ""
	case "goeni.eth.BlobTx.value":
		x.Value = ""
	case "goeni.eth.BlobTx.data":
		x.Data = nil
	case "goeni.eth.BlobTx.accesses":
		x.Accesses = nil
	case "goeni.eth.BlobTx.blob_fee_cap":
		x.BlobFeeCap = ""
	case "goeni.eth.BlobTx.blob_hashes":
		x.BlobHashes = nil
	case "goeni.eth.BlobTx.sidecar":
		x.Sidecar = nil
	case "goeni.eth.BlobTx.v":
		x.V = nil
	case "goeni.eth.BlobTx.r":
		x.R = nil
	case "goeni.eth.BlobTx.s":
		x.S = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTx"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BlobTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goeni.eth.BlobTx.chain_id":
		value := x.ChainId
		return protoreflect.ValueOfString(value)
	case "goeni.eth.BlobTx.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	case "goeni.eth.BlobTx.gas_tip_cap":
		value := x.GasTipCap
		return protoreflect.ValueOfString(value)
	case "goeni.eth.BlobTx.gas_fee_cap":
		value := x.GasFeeCap
		return protoreflect.ValueOfString(value)
	case "goeni.eth.BlobTx.gas_limit":
		value := x.GasLimit
		return protoreflect.ValueOfUint64(value)
	case "goeni.eth.BlobTx.to":
		value := x.To
		return protoreflect.ValueOfString(value)
	case "goeni.eth.BlobTx.value":
		value := x.Value
		return protoreflect.ValueOfString(value)
	case "goeni.eth.BlobTx.data":
		value := x.Data
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.BlobTx.accesses":
		if len(x.Accesses) == 0 {
			return protoreflect.ValueOfList(&_BlobTx_9_list{})
		}
		listValue := &_BlobTx_9_list{list: &x.Accesses}
		return protoreflect.ValueOfList(listValue)
	case "goeni.eth.BlobTx.blob_fee_cap":
		value := x.BlobFeeCap
		return protoreflect.ValueOfString(value)
	case "goeni.eth.BlobTx.blob_hashes":
		if len(x.BlobHashes) == 0 {
			return protoreflect.ValueOfList(&_BlobTx_11_list{})
		}
		listValue := &_BlobTx_11_list{list: &x.BlobHashes}
		return protoreflect.ValueOfList(listValue)
	case "goeni.eth.BlobTx.sidecar":
		value := x.Sidecar
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "goeni.eth.BlobTx.v":
		value := x.V
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.BlobTx.r":
		value := x.R
		return protoreflect.ValueOfBytes(value)
	case "goeni.eth.BlobTx.s":
		value := x.S
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTx"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goeni.eth.BlobTx.chain_id":
		x.ChainId = value.Interface().(string)
	case "goeni.eth.BlobTx.nonce":
		x.Nonce = value.Uint()
	case "goeni.eth.BlobTx.gas_tip_cap":
		x.GasTipCap = value.Interface().(string)
	case "goeni.eth.BlobTx.gas_fee_cap":
		x.GasFeeCap = value.Interface().(string)
	case "goeni.eth.BlobTx.gas_limit":
		x.GasLimit = value.Uint()
	case "goeni.eth.BlobTx.to":
		x.To = value.Interface().(string)
	case "goeni.eth.BlobTx.value":
		x.Value = value.Interface().(string)
	case "goeni.eth.BlobTx.data":
		x.Data = value.Bytes()
	case "goeni.eth.BlobTx.accesses":
		lv := value.List()
		clv := lv.(*_BlobTx_9_list)
		x.Accesses = *clv.list
	case "goeni.eth.BlobTx.blob_fee_cap":
		x.BlobFeeCap = value.Interface().(string)
	case "goeni.eth.BlobTx.blob_hashes":
		lv := value.List()
		clv := lv.(*_BlobTx_11_list)
		x.BlobHashes = *clv.list
	case "goeni.eth.BlobTx.sidecar":
		x.Sidecar = value.Message().Interface().(*BlobTxSidecar)
	case "goeni.eth.BlobTx.v":
		x.V = value.Bytes()
	case "goeni.eth.BlobTx.r":
		x.R = value.Bytes()
	case "goeni.eth.BlobTx.s":
		x.S = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTx"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.BlobTx.accesses":
		if x.Accesses == nil {
			x.Accesses = []*AccessTuple{}
		}
		value := &_BlobTx_9_list{list: &x.Accesses}
		return protoreflect.ValueOfList(value)
	case "goeni.eth.BlobTx.blob_hashes":
		if x.BlobHashes == nil {
			x.BlobHashes = [][]byte{}
		}
		value := &_BlobTx_11_list{list: &x.BlobHashes}
		return protoreflect.ValueOfList(value)
	case "goeni.eth.BlobTx.sidecar":
		if x.Sidecar == nil {
			x.Sidecar = new(BlobTxSidecar)
		}
		return protoreflect.ValueOfMessage(x.Sidecar.ProtoReflect())
	case "goeni.eth.BlobTx.chain_id":
		panic(fmt.Errorf("field chain_id of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.nonce":
		panic(fmt.Errorf("field nonce of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.gas_tip_cap":
		panic(fmt.Errorf("field gas_tip_cap of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.gas_fee_cap":
		panic(fmt.Errorf("field gas_fee_cap of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.gas_limit":
		panic(fmt.Errorf("field gas_limit of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.to":
		panic(fmt.Errorf("field to of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.value":
		panic(fmt.Errorf("field value of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.data":
		panic(fmt.Errorf("field data of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.blob_fee_cap":
		panic(fmt.Errorf("field blob_fee_cap of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.v":
		panic(fmt.Errorf("field v of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.r":
		panic(fmt.Errorf("field r of message goeni.eth.BlobTx is not mutable"))
	case "goeni.eth.BlobTx.s":
		panic(fmt.Errorf("field s of message goeni.eth.BlobTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTx"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BlobTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.BlobTx.chain_id":
		return protoreflect.ValueOfString("")
	case "goeni.eth.BlobTx.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goeni.eth.BlobTx.gas_tip_cap":
		return protoreflect.ValueOfString("")
	case "goeni.eth.BlobTx.gas_fee_cap":
		return protoreflect.ValueOfString("")
	case "goeni.eth.BlobTx.gas_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goeni.eth.BlobTx.to":
		return protoreflect.ValueOfString("")
	case "goeni.eth.BlobTx.value":
		return protoreflect.ValueOfString("")
	case "goeni.eth.BlobTx.data":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.BlobTx.accesses":
		list := []*AccessTuple{}
		return protoreflect.ValueOfList(&_BlobTx_9_list{list: &list})
	case "goeni.eth.BlobTx.blob_fee_cap":
		return protoreflect.ValueOfString("")
	case "goeni.eth.BlobTx.blob_hashes":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_BlobTx_11_list{list: &list})
	case "goeni.eth.BlobTx.sidecar":
		m := new(BlobTxSidecar)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "goeni.eth.BlobTx.v":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.BlobTx.r":
		return protoreflect.ValueOfBytes(nil)
	case "goeni.eth.BlobTx.s":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTx"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BlobTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goeni.eth.BlobTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BlobTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BlobTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BlobTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BlobTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		l = len(x.GasTipCap)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.GasFeeCap)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.GasLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.GasLimit))
		}
		l = len(x.To)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Value)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Data)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Accesses) > 0 {
			for _, e := range x.Accesses {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.BlobFeeCap)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.BlobHashes) > 0 {
			for _, b := range x.BlobHashes {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Sidecar != nil {
			l = options.Size(x.Sidecar)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.V)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.R)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.S)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BlobTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.S) > 0 {
			i -= len(x.S)
			copy(dAtA[i:], x.S)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.S)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.R) > 0 {
			i -= len(x.R)
			copy(dAtA[i:], x.R)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.R)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.V) > 0 {
			i -= len(x.V)
			copy(dAtA[i:], x.V)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.V)))
			i--
			dAtA[i] = 0x6a
		}
		if x.Sidecar != nil {
			encoded, err := options.Marshal(x.Sidecar)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.BlobHashes) > 0 {
			for iNdEx := len(x.BlobHashes) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.BlobHashes[iNdEx])
				copy(dAtA[i:], x.BlobHashes[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BlobHashes[iNdEx])))
				i--
				dAtA[i] = 0x5a
			}
		}
		if len(x.BlobFeeCap) > 0 {
			i -= len(x.BlobFeeCap)
			copy(dAtA[i:], x.BlobFeeCap)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BlobFeeCap)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.Accesses) > 0 {
			for iNdEx := len(x.Accesses) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Accesses[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.Data) > 0 {
			i -= len(x.Data)
			copy(dAtA[i:], x.Data)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Data)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Value) > 0 {
			i -= len(x.Value)
			copy(dAtA[i:], x.Value)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Value)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.To) > 0 {
			i -= len(x.To)
			copy(dAtA[i:], x.To)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.To)))
			i--
			dAtA[i] = 0x32
		}
		if x.GasLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GasLimit))
			i--
			dAtA[i] = 0x28
		}
		if len(x.GasFeeCap) > 0 {
			i -= len(x.GasFeeCap)
			copy(dAtA[i:], x.GasFeeCap)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasFeeCap)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.GasTipCap) > 0 {
			i -= len(x.GasTipCap)
			copy(dAtA[i:], x.GasTipCap)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasTipCap)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x10
		}
		if len(x.ChainId) > 0 {
			i -= len(x.ChainId)
			copy(dAtA[i:], x.ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChainId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BlobTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlobTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlobTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasTipCap", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasTipCap = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasFeeCap", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasFeeCap = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
				}
				x.GasLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GasLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.To = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Value = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = append(x.Data[:0], dAtA[iNdEx:postIndex]...)
				if x.Data == nil {
					x.Data = []byte{}
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Accesses", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Accesses = append(x.Accesses, &AccessTuple{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Accesses[len(x.Accesses)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlobFeeCap", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BlobFeeCap = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlobHashes", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BlobHashes = append(x.BlobHashes, make([]byte, postIndex-iNdEx))
				copy(x.BlobHashes[len(x.BlobHashes)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sidecar", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Sidecar == nil {
					x.Sidecar = &BlobTxSidecar{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Sidecar); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.V = append(x.V[:0], dAtA[iNdEx:postIndex]...)
				if x.V == nil {
					x.V = []byte{}
				}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.R = append(x.R[:0], dAtA[iNdEx:postIndex]...)
				if x.R == nil {
					x.R = []byte{}
				}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.S = append(x.S[:0], dAtA[iNdEx:postIndex]...)
				if x.S == nil {
					x.S = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_BlobTxSidecar_1_list)(nil)

type _BlobTxSidecar_1_list struct {
	list *[][]byte
}

func (x *_BlobTxSidecar_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BlobTxSidecar_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_BlobTxSidecar_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_BlobTxSidecar_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_BlobTxSidecar_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message BlobTxSidecar at list field Blobs as it is not of Message kind"))
}

func (x *_BlobTxSidecar_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_BlobTxSidecar_1_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_BlobTxSidecar_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_BlobTxSidecar_2_list)(nil)

type _BlobTxSidecar_2_list struct {
	list *[][]byte
}

func (x *_BlobTxSidecar_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BlobTxSidecar_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_BlobTxSidecar_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_BlobTxSidecar_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_BlobTxSidecar_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message BlobTxSidecar at list field Commitments as it is not of Message kind"))
}

func (x *_BlobTxSidecar_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_BlobTxSidecar_2_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_BlobTxSidecar_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_BlobTxSidecar_3_list)(nil)

type _BlobTxSidecar_3_list struct {
	list *[][]byte
}

func (x *_BlobTxSidecar_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BlobTxSidecar_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_BlobTxSidecar_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_BlobTxSidecar_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_BlobTxSidecar_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message BlobTxSidecar at list field Proofs as it is not of Message kind"))
}

func (x *_BlobTxSidecar_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_BlobTxSidecar_3_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_BlobTxSidecar_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_BlobTxSidecar             protoreflect.MessageDescriptor
	fd_BlobTxSidecar_blobs       protoreflect.FieldDescriptor
	fd_BlobTxSidecar_commitments protoreflect.FieldDescriptor
	fd_BlobTxSidecar_proofs      protoreflect.FieldDescriptor
)

func init() {
	file_goeni_eth_tx_proto_init()
	md_BlobTxSidecar = File_goeni_eth_tx_proto.Messages().ByName("BlobTxSidecar")
	fd_BlobTxSidecar_blobs = md_BlobTxSidecar.Fields().ByName("blobs")
	fd_BlobTxSidecar_commitments = md_BlobTxSidecar.Fields().ByName("commitments")
	fd_BlobTxSidecar_proofs = md_BlobTxSidecar.Fields().ByName("proofs")
}

var _ protoreflect.Message = (*fastReflection_BlobTxSidecar)(nil)

type fastReflection_BlobTxSidecar BlobTxSidecar

func (x *BlobTxSidecar) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BlobTxSidecar)(x)
}

func (x *BlobTxSidecar) slowProtoReflect() protoreflect.Message {
	mi := &file_goeni_eth_tx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BlobTxSidecar_messageType fastReflection_BlobTxSidecar_messageType
var _ protoreflect.MessageType = fastReflection_BlobTxSidecar_messageType{}

type fastReflection_BlobTxSidecar_messageType struct{}

func (x fastReflection_BlobTxSidecar_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BlobTxSidecar)(nil)
}
func (x fastReflection_BlobTxSidecar_messageType) New() protoreflect.Message {
	return new(fastReflection_BlobTxSidecar)
}
func (x fastReflection_BlobTxSidecar_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BlobTxSidecar
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BlobTxSidecar) Descriptor() protoreflect.MessageDescriptor {
	return md_BlobTxSidecar
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BlobTxSidecar) Type() protoreflect.MessageType {
	return _fastReflection_BlobTxSidecar_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BlobTxSidecar) New() protoreflect.Message {
	return new(fastReflection_BlobTxSidecar)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BlobTxSidecar) Interface() protoreflect.ProtoMessage {
	return (*BlobTxSidecar)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BlobTxSidecar) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Blobs) != 0 {
		value := protoreflect.ValueOfList(&_BlobTxSidecar_1_list{list: &x.Blobs})
		if !f(fd_BlobTxSidecar_blobs, value) {
			return
		}
	}
	if len(x.Commitments) != 0 {
		value := protoreflect.ValueOfList(&_BlobTxSidecar_2_list{list: &x.Commitments})
		if !f(fd_BlobTxSidecar_commitments, value) {
			return
		}
	}
	if len(x.Proofs) != 0 {
		value := protoreflect.ValueOfList(&_BlobTxSidecar_3_list{list: &x.Proofs})
		if !f(fd_BlobTxSidecar_proofs, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BlobTxSidecar) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goeni.eth.BlobTxSidecar.blobs":
		return len(x.Blobs) != 0
	case "goeni.eth.BlobTxSidecar.commitments":
		return len(x.Commitments) != 0
	case "goeni.eth.BlobTxSidecar.proofs":
		return len(x.Proofs) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTxSidecar"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTxSidecar does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobTxSidecar) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goeni.eth.BlobTxSidecar.blobs":
		x.Blobs = nil
	case "goeni.eth.BlobTxSidecar.commitments":
		x.Commitments = nil
	case "goeni.eth.BlobTxSidecar.proofs":
		x.Proofs = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTxSidecar"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTxSidecar does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BlobTxSidecar) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goeni.eth.BlobTxSidecar.blobs":
		if len(x.Blobs) == 0 {
			return protoreflect.ValueOfList(&_BlobTxSidecar_1_list{})
		}
		listValue := &_BlobTxSidecar_1_list{list: &x.Blobs}
		return protoreflect.ValueOfList(listValue)
	case "goeni.eth.BlobTxSidecar.commitments":
		if len(x.Commitments) == 0 {
			return protoreflect.ValueOfList(&_BlobTxSidecar_2_list{})
		}
		listValue := &_BlobTxSidecar_2_list{list: &x.Commitments}
		return protoreflect.ValueOfList(listValue)
	case "goeni.eth.BlobTxSidecar.proofs":
		if len(x.Proofs) == 0 {
			return protoreflect.ValueOfList(&_BlobTxSidecar_3_list{})
		}
		listValue := &_BlobTxSidecar_3_list{list: &x.Proofs}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTxSidecar"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTxSidecar does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobTxSidecar) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goeni.eth.BlobTxSidecar.blobs":
		lv := value.List()
		clv := lv.(*_BlobTxSidecar_1_list)
		x.Blobs = *clv.list
	case "goeni.eth.BlobTxSidecar.commitments":
		lv := value.List()
		clv := lv.(*_BlobTxSidecar_2_list)
		x.Commitments = *clv.list
	case "goeni.eth.BlobTxSidecar.proofs":
		lv := value.List()
		clv := lv.(*_BlobTxSidecar_3_list)
		x.Proofs = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTxSidecar"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTxSidecar does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobTxSidecar) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.BlobTxSidecar.blobs":
		if x.Blobs == nil {
			x.Blobs = [][]byte{}
		}
		value := &_BlobTxSidecar_1_list{list: &x.Blobs}
		return protoreflect.ValueOfList(value)
	case "goeni.eth.BlobTxSidecar.commitments":
		if x.Commitments == nil {
			x.Commitments = [][]byte{}
		}
		value := &_BlobTxSidecar_2_list{list: &x.Commitments}
		return protoreflect.ValueOfList(value)
	case "goeni.eth.BlobTxSidecar.proofs":
		if x.Proofs == nil {
			x.Proofs = [][]byte{}
		}
		value := &_BlobTxSidecar_3_list{list: &x.Proofs}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTxSidecar"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTxSidecar does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BlobTxSidecar) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goeni.eth.BlobTxSidecar.blobs":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_BlobTxSidecar_1_list{list: &list})
	case "goeni.eth.BlobTxSidecar.commitments":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_BlobTxSidecar_2_list{list: &list})
	case "goeni.eth.BlobTxSidecar.proofs":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_BlobTxSidecar_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.BlobTxSidecar"))
		}
		panic(fmt.Errorf("message goeni.eth.BlobTxSidecar does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BlobTxSidecar) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goeni.eth.BlobTxSidecar", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BlobTxSidecar) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobTxSidecar) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BlobTxSidecar) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BlobTxSidecar) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BlobTxSidecar)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Blobs) > 0 {
			for _, b := range x.Blobs {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Commitments) > 0 {
			for _, b := range x.Commitments {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Proofs) > 0 {
			for _, b := range x.Proofs {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BlobTxSidecar)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Proofs) > 0 {
			for iNdEx := len(x.Proofs) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Proofs[iNdEx])
				copy(dAtA[i:], x.Proofs[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Proofs[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Commitments) > 0 {
			for iNdEx := len(x.Commitments) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Commitments[iNdEx])
				copy(dAtA[i:], x.Commitments[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Commitments[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Blobs) > 0 {
			for iNdEx := len(x.Blobs) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Blobs[iNdEx])
				copy(dAtA[i:], x.Blobs[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Blobs[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BlobTxSidecar)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlobTxSidecar: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlobTxSidecar: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Blobs", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Blobs = append(x.Blobs, make([]byte, postIndex-iNdEx))
				copy(x.Blobs[len(x.Blobs)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Commitments = append(x.Commitments, make([]byte, postIndex-iNdEx))
				copy(x.Commitments[len(x.Commitments)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Proofs = append(x.Proofs, make([]byte, postIndex-iNdEx))
				copy(x.Proofs[len(x.Proofs)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ExtensionOptionsEthereumTx protoreflect.MessageDescriptor
)

func init() {
	file_goeni_eth_tx_proto_init()
	md_ExtensionOptionsEthereumTx = File_goeni_eth_tx_proto.Messages().ByName("ExtensionOptionsEthereumTx")
}

var _ protoreflect.Message = (*fastReflection_ExtensionOptionsEthereumTx)(nil)

type fastReflection_ExtensionOptionsEthereumTx ExtensionOptionsEthereumTx

func (x *ExtensionOptionsEthereumTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ExtensionOptionsEthereumTx)(x)
}

func (x *ExtensionOptionsEthereumTx) slowProtoReflect() protoreflect.Message {
	mi := &file_goeni_eth_tx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ExtensionOptionsEthereumTx_messageType fastReflection_ExtensionOptionsEthereumTx_messageType
var _ protoreflect.MessageType = fastReflection_ExtensionOptionsEthereumTx_messageType{}

type fastReflection_ExtensionOptionsEthereumTx_messageType struct{}

func (x fastReflection_ExtensionOptionsEthereumTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ExtensionOptionsEthereumTx)(nil)
}
func (x fastReflection_ExtensionOptionsEthereumTx_messageType) New() protoreflect.Message {
	return new(fastReflection_ExtensionOptionsEthereumTx)
}
func (x fastReflection_ExtensionOptionsEthereumTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ExtensionOptionsEthereumTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ExtensionOptionsEthereumTx) Descriptor() protoreflect.MessageDescriptor {
	return md_ExtensionOptionsEthereumTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ExtensionOptionsEthereumTx) Type() protoreflect.MessageType {
	return _fastReflection_ExtensionOptionsEthereumTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ExtensionOptionsEthereumTx) New() protoreflect.Message {
	return new(fastReflection_ExtensionOptionsEthereumTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ExtensionOptionsEthereumTx) Interface() protoreflect.ProtoMessage {
	return (*ExtensionOptionsEthereumTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ExtensionOptionsEthereumTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ExtensionOptionsEthereumTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.ExtensionOptionsEthereumTx"))
		}
		panic(fmt.Errorf("message goeni.eth.ExtensionOptionsEthereumTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExtensionOptionsEthereumTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.ExtensionOptionsEthereumTx"))
		}
		panic(fmt.Errorf("message goeni.eth.ExtensionOptionsEthereumTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ExtensionOptionsEthereumTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.ExtensionOptionsEthereumTx"))
		}
		panic(fmt.Errorf("message goeni.eth.ExtensionOptionsEthereumTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExtensionOptionsEthereumTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.ExtensionOptionsEthereumTx"))
		}
		panic(fmt.Errorf("message goeni.eth.ExtensionOptionsEthereumTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExtensionOptionsEthereumTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.ExtensionOptionsEthereumTx"))
		}
		panic(fmt.Errorf("message goeni.eth.ExtensionOptionsEthereumTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ExtensionOptionsEthereumTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goeni.eth.ExtensionOptionsEthereumTx"))
		}
		panic(fmt.Errorf("message goeni.eth.ExtensionOptionsEthereumTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ExtensionOptionsEthereumTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goeni.eth.ExtensionOptionsEthereumTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ExtensionOptionsEthereumTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExtensionOptionsEthereumTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ExtensionOptionsEthereumTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ExtensionOptionsEthereumTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ExtensionOptionsEthereumTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ExtensionOptionsEthereumTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ExtensionOptionsEthereumTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExtensionOptionsEthereumTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExtensionOptionsEthereumTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: goeni/eth/tx.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccessTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StorageKeys []string `protobuf:"bytes,2,rep,name=storage_keys,json=storageKeys,proto3" json:"storage_keys,omitempty"`
}

func (x *AccessTuple) Reset() {
	*x = AccessTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goeni_eth_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTuple) ProtoMessage() {}

// Deprecated: Use AccessTuple.ProtoReflect.Descriptor instead.
func (*AccessTuple) Descriptor() ([]byte, []int) {
	return file_goeni_eth_tx_proto_rawDescGZIP(), []int{0}
}

func (x *AccessTuple) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessTuple) GetStorageKeys() []string {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

type AssociateTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signature values
	V             []byte `protobuf:"bytes,1,opt,name=v,proto3" json:"v,omitempty"`
	R             []byte `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
	S             []byte `protobuf:"bytes,3,opt,name=s,proto3" json:"s,omitempty"`
	CustomMessage string `protobuf:"bytes,4,opt,name=custom_message,json=customMessage,proto3" json:"custom_message,omitempty"`
}

func (x *AssociateTx) Reset() {
	*x = AssociateTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goeni_eth_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateTx) ProtoMessage() {}

// Deprecated: Use AssociateTx.ProtoReflect.Descriptor instead.
func (*AssociateTx) Descriptor() ([]byte, []int) {
	return file_goeni_eth_tx_proto_rawDescGZIP(), []int{1}
}

func (x *AssociateTx) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *AssociateTx) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *AssociateTx) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *AssociateTx) GetCustomMessage() string {
	if x != nil {
		return x.CustomMessage
	}
	return ""
}

type LegacyTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce    uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasPrice string `protobuf:"bytes,2,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit uint64 `protobuf:"varint,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	To       string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Value    string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Data     []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// signature values
	V []byte `protobuf:"bytes,7,opt,name=v,proto3" json:"v,omitempty"`
	R []byte `protobuf:"bytes,8,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,9,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *LegacyTx) Reset() {
	*x = LegacyTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goeni_eth_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacyTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyTx) ProtoMessage() {}

// Deprecated: Use LegacyTx.ProtoReflect.Descriptor instead.
func (*LegacyTx) Descriptor() ([]byte, []int) {
	return file_goeni_eth_tx_proto_rawDescGZIP(), []int{2}
}

func (x *LegacyTx) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *LegacyTx) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *LegacyTx) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *LegacyTx) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *LegacyTx) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LegacyTx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LegacyTx) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *LegacyTx) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *LegacyTx) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type AccessListTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId  string         `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce    uint64         `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasPrice string         `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit uint64         `protobuf:"varint,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	To       string         `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Value    string         `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Data     []byte         `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Accesses []*AccessTuple `protobuf:"bytes,8,rep,name=accesses,proto3" json:"accesses,omitempty"`
	// signature values
	V []byte `protobuf:"bytes,9,opt,name=v,proto3" json:"v,omitempty"`
	R []byte `protobuf:"bytes,10,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,11,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *AccessListTx) Reset() {
	*x = AccessListTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goeni_eth_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListTx) ProtoMessage() {}

// Deprecated: Use AccessListTx.ProtoReflect.Descriptor instead.
func (*AccessListTx) Descriptor() ([]byte, []int) {
	return file_goeni_eth_tx_proto_rawDescGZIP(), []int{3}
}

func (x *AccessListTx) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *AccessListTx) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AccessListTx) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *AccessListTx) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *AccessListTx) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *AccessListTx) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AccessListTx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AccessListTx) GetAccesses() []*AccessTuple {
	if x != nil {
		return x.Accesses
	}
	return nil
}

func (x *AccessListTx) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *AccessListTx) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *AccessListTx) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type DynamicFeeTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId   string         `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce     uint64         `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasTipCap string         `protobuf:"bytes,3,opt,name=gas_tip_cap,json=gasTipCap,proto3" json:"gas_tip_cap,omitempty"`
	GasFeeCap string         `protobuf:"bytes,4,opt,name=gas_fee_cap,json=gasFeeCap,proto3" json:"gas_fee_cap,omitempty"`
	GasLimit  uint64         `protobuf:"varint,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	To        string         `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Value     string         `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Data      []byte         `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Accesses  []*AccessTuple `protobuf:"bytes,9,rep,name=accesses,proto3" json:"accesses,omitempty"`
	// signature values
	V []byte `protobuf:"bytes,10,opt,name=v,proto3" json:"v,omitempty"`
	R []byte `protobuf:"bytes,11,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,12,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *DynamicFeeTx) Reset() {
	*x = DynamicFeeTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goeni_eth_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicFeeTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicFeeTx) ProtoMessage() {}

// Deprecated: Use DynamicFeeTx.ProtoReflect.Descriptor instead.
func (*DynamicFeeTx) Descriptor() ([]byte, []int) {
	return file_goeni_eth_tx_proto_rawDescGZIP(), []int{4}
}

func (x *DynamicFeeTx) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *DynamicFeeTx) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *DynamicFeeTx) GetGasTipCap() string {
	if x != nil {
		return x.GasTipCap
	}
	return ""
}

func (x *DynamicFeeTx) GetGasFeeCap() string {
	if x != nil {
		return x.GasFeeCap
	}
	return ""
}

func (x *DynamicFeeTx) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *DynamicFeeTx) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *DynamicFeeTx) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DynamicFeeTx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DynamicFeeTx) GetAccesses() []*AccessTuple {
	if x != nil {
		return x.Accesses
	}
	return nil
}

func (x *DynamicFeeTx) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *DynamicFeeTx) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *DynamicFeeTx) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type BlobTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId    string         `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce      uint64         `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasTipCap  string         `protobuf:"bytes,3,opt,name=gas_tip_cap,json=gasTipCap,proto3" json:"gas_tip_cap,omitempty"`
	GasFeeCap  string         `protobuf:"bytes,4,opt,name=gas_fee_cap,json=gasFeeCap,proto3" json:"gas_fee_cap,omitempty"`
	GasLimit   uint64         `protobuf:"varint,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	To         string         `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Value      string         `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Data       []byte         `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Accesses   []*AccessTuple `protobuf:"bytes,9,rep,name=accesses,proto3" json:"accesses,omitempty"`
	BlobFeeCap string         `protobuf:"bytes,10,opt,name=blob_fee_cap,json=blobFeeCap,proto3" json:"blob_fee_cap,omitempty"`
	BlobHashes [][]byte       `protobuf:"bytes,11,rep,name=blob_hashes,json=blobHashes,proto3" json:"blob_hashes,omitempty"`
	Sidecar    *BlobTxSidecar `protobuf:"bytes,12,opt,name=sidecar,proto3" json:"sidecar,omitempty"`
	// signature values
	V []byte `protobuf:"bytes,13,opt,name=v,proto3" json:"v,omitempty"`
	R []byte `protobuf:"bytes,14,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,15,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *BlobTx) Reset() {
	*x = BlobTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goeni_eth_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTx) ProtoMessage() {}

// Deprecated: Use BlobTx.ProtoReflect.Descriptor instead.
func (*BlobTx) Descriptor() ([]byte, []int) {
	return file_goeni_eth_tx_proto_rawDescGZIP(), []int{5}
}

func (x *BlobTx) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *BlobTx) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BlobTx) GetGasTipCap() string {
	if x != nil {
		return x.GasTipCap
	}
	return ""
}

func (x *BlobTx) GetGasFeeCap() string {
	if x != nil {
		return x.GasFeeCap
	}
	return ""
}

func (x *BlobTx) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *BlobTx) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *BlobTx) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BlobTx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BlobTx) GetAccesses() []*AccessTuple {
	if x != nil {
		return x.Accesses
	}
	return nil
}

func (x *BlobTx) GetBlobFeeCap() string {
	if x != nil {
		return x.BlobFeeCap
	}
	return ""
}

func (x *BlobTx) GetBlobHashes() [][]byte {
	if x != nil {
		return x.BlobHashes
	}
	return nil
}

func (x *BlobTx) GetSidecar() *BlobTxSidecar {
	if x != nil {
		return x.Sidecar
	}
	return nil
}

func (x *BlobTx) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *BlobTx) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *BlobTx) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type BlobTxSidecar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blobs       [][]byte `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	Commitments [][]byte `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
	Proofs      [][]byte `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (x *BlobTxSidecar) Reset() {
	*x = BlobTxSidecar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goeni_eth_tx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobTxSidecar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTxSidecar) ProtoMessage() {}

// Deprecated: Use BlobTxSidecar.ProtoReflect.Descriptor instead.
func (*BlobTxSidecar) Descriptor() ([]byte, []int) {
	return file_goeni_eth_tx_proto_rawDescGZIP(), []int{6}
}

func (x *BlobTxSidecar) GetBlobs() [][]byte {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *BlobTxSidecar) GetCommitments() [][]byte {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *BlobTxSidecar) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type ExtensionOptionsEthereumTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExtensionOptionsEthereumTx) Reset() {
	*x = ExtensionOptionsEthereumTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goeni_eth_tx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionOptionsEthereumTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionOptionsEthereumTx) ProtoMessage() {}

// Deprecated: Use ExtensionOptionsEthereumTx.ProtoReflect.Descriptor instead.
func (*ExtensionOptionsEthereumTx) Descriptor() ([]byte, []int) {
	return file_goeni_eth_tx_proto_rawDescGZIP(), []int{7}
}

var File_goeni_eth_tx_proto protoreflect.FileDescriptor

var file_goeni_eth_tx_proto_rawDesc = []byte{
	0x0a, 0x12, 0x67, 0x6f, 0x65, 0x6e, 0x69, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x74, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x6f, 0x65, 0x6e, 0x69, 0x2e, 0x65, 0x74, 0x68, 0x1a,
	0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32,
	0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xde, 0x1f, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x64, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x54, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x84,
	0x02, 0x0a, 0x08, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52,
	0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0xe2, 0xde, 0x1f, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x3a,
	0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xaa, 0x03, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x78, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0xe2, 0xde, 0x1f, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0xea, 0xde,
	0x1f, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xda, 0xde, 0x1f,
	0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xe2, 0xde, 0x1f, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x65, 0x6e, 0x69, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x20, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0xaa, 0xdf, 0x1f, 0x0a, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x76,
	0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12, 0x0c,
	0x0a, 0x01, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x3a, 0x04, 0x88, 0xa0,
	0x1f, 0x00, 0x22, 0xe8, 0x03, 0x0a, 0x0c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x65,
	0x65, 0x54, 0x78, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0xe2, 0xde, 0x1f, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x74, 0x69, 0x70,
	0x5f, 0x63, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x61, 0x73, 0x54, 0x69, 0x70, 0x43, 0x61, 0x70,
	0x12, 0x39, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x09, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x43, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xe2, 0xde, 0x1f, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x65, 0x6e,
	0x69, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x42, 0x20, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0xaa, 0xdf, 0x1f, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x0c, 0x0a,
	0x01, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xf4, 0x04,
	0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x78, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x49, 0x6e, 0x74, 0xe2, 0xde, 0x1f, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0xea, 0xde, 0x1f, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x67, 0x61,
	0x73, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x61, 0x73, 0x54,
	0x69, 0x70, 0x43, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x63, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x43, 0x61, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xe2, 0xde, 0x1f, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x65, 0x6e, 0x69, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x20, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0xaa, 0xdf, 0x1f, 0x0a, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63,
	0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x46, 0x65, 0x65, 0x43, 0x61, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x65, 0x6e, 0x69, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x54, 0x78, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x07, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72,
	0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x3a, 0x04,
	0x88, 0xa0, 0x1f, 0x00, 0x22, 0x5f, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x78, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0x22, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x54, 0x78, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x42, 0x88, 0x01, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x65, 0x6e, 0x69, 0x2e, 0x65, 0x74, 0x68, 0x42, 0x07, 0x54, 0x78, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x69, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x67, 0x6f, 0x2d,
	0x65, 0x6e, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x65, 0x6e, 0x69, 0x2f, 0x65, 0x74,
	0x68, 0xa2, 0x02, 0x03, 0x47, 0x45, 0x58, 0xaa, 0x02, 0x09, 0x47, 0x6f, 0x65, 0x6e, 0x69, 0x2e,
	0x45, 0x74, 0x68, 0xca, 0x02, 0x09, 0x47, 0x6f, 0x65, 0x6e, 0x69, 0x5c, 0x45, 0x74, 0x68, 0xe2,
	0x02, 0x15, 0x47, 0x6f, 0x65, 0x6e, 0x69, 0x5c, 0x45, 0x74, 0x68, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x47, 0x6f, 0x65, 0x6e, 0x69, 0x3a,
	0x3a, 0x45, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goeni_eth_tx_proto_rawDescOnce sync.Once
	file_goeni_eth_tx_proto_rawDescData = file_goeni_eth_tx_proto_rawDesc
)

func file_goeni_eth_tx_proto_rawDescGZIP() []byte {
	file_goeni_eth_tx_proto_rawDescOnce.Do(func() {
		file_goeni_eth_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_goeni_eth_tx_proto_rawDescData)
	})
	return file_goeni_eth_tx_proto_rawDescData
}

var file_goeni_eth_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_goeni_eth_tx_proto_goTypes = []interface{}{
	(*AccessTuple)(nil),                // 0: goeni.eth.AccessTuple
	(*AssociateTx)(nil),                // 1: goeni.eth.AssociateTx
	(*LegacyTx)(nil),                   // 2: goeni.eth.LegacyTx
	(*AccessListTx)(nil),               // 3: goeni.eth.AccessListTx
	(*DynamicFeeTx)(nil),               // 4: goeni.eth.DynamicFeeTx
	(*BlobTx)(nil),                     // 5: goeni.eth.BlobTx
	(*BlobTxSidecar)(nil),              // 6: goeni.eth.BlobTxSidecar
	(*ExtensionOptionsEthereumTx)(nil), // 7: goeni.eth.ExtensionOptionsEthereumTx
}
var file_goeni_eth_tx_proto_depIdxs = []int32{
	0, // 0: goeni.eth.AccessListTx.accesses:type_name -> goeni.eth.AccessTuple
	0, // 1: goeni.eth.DynamicFeeTx.accesses:type_name -> goeni.eth.AccessTuple
	0, // 2: goeni.eth.BlobTx.accesses:type_name -> goeni.eth.AccessTuple
	6, // 3: goeni.eth.BlobTx.sidecar:type_name -> goeni.eth.BlobTxSidecar
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_goeni_eth_tx_proto_init() }
func file_goeni_eth_tx_proto_init() {
	if File_goeni_eth_tx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goeni_eth_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goeni_eth_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goeni_eth_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacyTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goeni_eth_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessListTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goeni_eth_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicFeeTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goeni_eth_tx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goeni_eth_tx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobTxSidecar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goeni_eth_tx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionOptionsEthereumTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goeni_eth_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goeni_eth_tx_proto_goTypes,
		DependencyIndexes: file_goeni_eth_tx_proto_depIdxs,
		MessageInfos:      file_goeni_eth_tx_proto_msgTypes,
	}.Build()
	File_goeni_eth_tx_proto = out.File
	file_goeni_eth_tx_proto_rawDesc = nil
	file_goeni_eth_tx_proto_goTypes = nil
	file_goeni_eth_tx_proto_depIdxs = nil
}
